
The continuous integration I want
=================================


Testing is important, I've been a big advocate of writing tests for a while, however when you've got tests you need to run them.  This is a big problem in open source, Django works on something like six versions of Python (2.4, 2.5, 2.6, 2.7, Jython, and PyPy), 4 databases (SQLite, PostgreSQL, MySQL, Oracle, plus the GIS backends, and external backends), and I don't even know how many operating systems (at least the various Linuxes, OS X, and Windows).  If I tried to run the tests in all those configurations for every commit I'd go crazy.  Reusable applications have it even worse, ideally they should be tested under all those configurations, **with each version of Django they support**.  For a Django application that wants to work on Django 1.1, 1.2, and all of those interpreters, databases, and operating systems you've got over 100 configurations.  Crazy.  John Resig faced a similar problem with jQuery (5 major browsers, multiple versions, mobile and desktop, different OSs), and the result was `Test Swarm <http://ejohn.org/blog/test-swarm-alpha-open/>`_ (note that at this time it doesn't appear to be up), an automated way for people to volunteer their machines to run tests.  We need something like that for Python.

It'd be nice if it were as simple as users pointing their browser at a URL, but that's not practical with Python: the environments we want to test in are more complex than what can be detected, we need to know what external services are available (databases, for example).  My suggestion is users should maintain a config file (``.ini`` perhaps) somewhere on their system, it would say what versions of Python are available, and what external services are available (and how they can be accessed, e.g. DB passwords).  Then the user downloads a bootstrap script and runs it.  This script sees what services the user has available on their machine and queries a central server to see what tests need to be run, given the configuration they have available.  The script downloads a test, creates a virtualenv, and does whatever setup it needs to do (e.g. writing a Django ``settings.py`` file given the available DB configuration), and runs the tests.  Finally it sends the test results back to the central server.

It's very much like a standard buildbot system, except any user can download the script and start running tests.  There are a number of problems to be solved, how do you verify that a project's tests aren't malicious (only allow trusted tests to start), how do you verify that the test results are valid, how do you actually write the configuration for a test suite?  However, if solved I think this could be an invaluable resource for the Python community.  Have a reusable app you want tested?  Sign it up for ``PonySwarm``, add a post-commit hook, and users will automatically run the tests for it.
