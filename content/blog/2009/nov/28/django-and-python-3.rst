
Django and Python 3
===================


Today I'm starting off doing some of the posts people want to see, and the number one item on that list is Django and Python 3.  Python 3 has been out for about a year at this point, and so far Django hasn't really started to move towards it (at least at a first glance).  However, Django has already begun the long process towards moving to Python 3, this post is going to recap exactly what Django's migration strategy is (most of this post is a recap of a message `James Bennett <http://www.b-list.org/>`_ sent to the django-developers mailing list after the 1.0 release, available `here <http://groups.google.com/group/django-developers/msg/0888b1c8f2518059>`_).

One of the most important things to recognize in this that though there are many developers using Django for smaller projects, or new projects that want to start these on Python 3, there are also a great many more with legacy (as if we can call recent deployments on Python2.6 and Django 1.1 legacy) deployments that they want to maintain and update.  Further, Django's latest release, 1.1, has support for Python releases as old as 2.3, and a migration to Python 3 from 2.3 is nontrivial.  However, it is significantly easier to make this migration from Python 2.6.  This is the crux of James's plan, people want to move to Python 3.0 and moving towards Python 2.6 makes this easier for them and us.  Therefore, since the 1.1 release Django has been removing support for one point version of Python per Django release.  So, Django 1.1 will be the last release to support Python 2.3, 1.2 will be the last to support 2.4, etc.  This plan isn't guaranteed, if there's a compelling reason to maintain support for a version for longer it will likely override this plan (for example if a particularly common deployment platform only offered Python 2.5 removing support for it might be delayed an additional release).

At the end of this process Django is going to end up only supporting Python 2.6.  At this point (or maybe even before), a strategy will need to be devised for how to actually handle the switch.  Some possibilities are, 1) having an official breakpoint, only one version is supported at a given time, 2) Python 3 support begins in a branch that tracks trunk and eventually it switches to become trunk once Python 3 is the more common deployment, 3) Python 2.6 and 3 are supported from a single codebase.  I'm not sure which one of these is easiest, other projects such as PLY have chosen to go with option 3, however my inclination is that option 2 will be best for Django since issues like bytes vs. string are particularly prominent in Django (since it talks to so many external data sources).

For people who are interested Martin von LÃ¶wis actually put together `a patch <http://wiki.python.org/moin/PortingDjangoTo3k>`_ that, at the time, gave Django Python 3 support (at least enough to run the tutorial under SQLite).  If you're very interested in Django on Python 3 the best path would probably be to bring that patch up to date (unless it's wildly out of date, I haven't checked), and starting to fix new things that have been introduced since the patch was written.  This work isn't likely to get any official support, since maintaining Python 2.4 support and Python 3 would be far too difficult, however there's no reason you can't maintain the patch externally on something like Github or Bitbucket.
